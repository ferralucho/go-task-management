// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	reflect "reflect"

	entity "github.com/ferralucho/go-task-management/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockCard is a mock of Card interface.
type MockCard struct {
	ctrl     *gomock.Controller
	recorder *MockCardMockRecorder
}

// MockCardMockRecorder is the mock recorder for MockCard.
type MockCardMockRecorder struct {
	mock *MockCard
}

// NewMockCard creates a new mock instance.
func NewMockCard(ctrl *gomock.Controller) *MockCard {
	mock := &MockCard{ctrl: ctrl}
	mock.recorder = &MockCardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCard) EXPECT() *MockCardMockRecorder {
	return m.recorder
}

// CreateBug mocks base method.
func (m *MockCard) CreateBug(arg0 context.Context, arg1 entity.Bug) (entity.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBug", arg0, arg1)
	ret0, _ := ret[0].(entity.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBug indicates an expected call of CreateBug.
func (mr *MockCardMockRecorder) CreateBug(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBug", reflect.TypeOf((*MockCard)(nil).CreateBug), arg0, arg1)
}

// CreateIssue mocks base method.
func (m *MockCard) CreateIssue(arg0 context.Context, arg1 entity.Issue) (entity.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIssue", arg0, arg1)
	ret0, _ := ret[0].(entity.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIssue indicates an expected call of CreateIssue.
func (mr *MockCardMockRecorder) CreateIssue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssue", reflect.TypeOf((*MockCard)(nil).CreateIssue), arg0, arg1)
}

// CreateTask mocks base method.
func (m *MockCard) CreateTask(arg0 context.Context, arg1 entity.Task) (entity.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0, arg1)
	ret0, _ := ret[0].(entity.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockCardMockRecorder) CreateTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockCard)(nil).CreateTask), arg0, arg1)
}

// MockCardRepo is a mock of CardRepo interface.
type MockCardRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCardRepoMockRecorder
}

// MockCardRepoMockRecorder is the mock recorder for MockCardRepo.
type MockCardRepoMockRecorder struct {
	mock *MockCardRepo
}

// NewMockCardRepo creates a new mock instance.
func NewMockCardRepo(ctrl *gomock.Controller) *MockCardRepo {
	mock := &MockCardRepo{ctrl: ctrl}
	mock.recorder = &MockCardRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardRepo) EXPECT() *MockCardRepoMockRecorder {
	return m.recorder
}

// CreateCard mocks base method.
func (m *MockCardRepo) CreateCard(arg0 context.Context, arg1 entity.InternalCard) (entity.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", arg0, arg1)
	ret0, _ := ret[0].(entity.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCard indicates an expected call of CreateCard.
func (mr *MockCardRepoMockRecorder) CreateCard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockCardRepo)(nil).CreateCard), arg0, arg1)
}
